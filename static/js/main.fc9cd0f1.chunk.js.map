{"version":3,"sources":["bll/calendarReducer.ts","components/calendar/functions.ts","components/common/superRadio/superRadio.tsx","dall/api.ts","components/calendar/calendar.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["initialState","years","monthNames","weekDayNames","data","Date","currentDate","selectedDate","reservedDate","changeDataAC","type","formatDate","d","month","getMonth","day","getDate","year","getFullYear","length","join","DAYS_IN_MONTH","WEEK_DAYS_FROM_MONDAY","Month","areEqual","a","b","getMonthData","result","date","daysInMonth","isLeapYear","getDaysInMonth","monthStartsOn","dayOfWeek","getDay","getDayOfWeek","i","j","undefined","SuperRadio","name","options","value","onChangeOption","onChange","restProps","onChangeCallback","e","currentTarget","mappedOptions","map","o","checked","Api","email","time","cost","axios","post","then","response","Calendar","localState","useSelector","store","CalendarReducer","useState","editMode","setEditMode","setCurrentDate","customerName","setCustomerName","customerEmail","setCustomerEmail","timeReserved","setTimeReserved","dispatch","useDispatch","monthData","className","onClick","placeholder","disabled","sessionStorage","setItem","JSON","stringify","index","days","week","DataReserved","getItem","dateString","isInArr","includes","handleDay","style","background","classnames","parse","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","state","action","arr","formatted","filter","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc9cd0f1.chunk.js","sourcesContent":["export const initialState: TypeInitialState = {\r\n    years: [ 2021, 2022,2023,2024,2025],\r\n    monthNames: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь',\r\n        'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\r\n    weekDayNames: ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'],\r\n    data: new Date(),\r\n    currentDate: new Date(),\r\n    selectedDate: new Date(),\r\n    reservedDate:[]\r\n}\r\n\r\nexport const changeDataAC = (data: Date) => {\r\n    return {\r\n        type: '/calendarReducer/CHANGE_DATA',\r\n        data\r\n    } as const\r\n}\r\nexport const selectDataAC = (data: Date) => {\r\n    return {\r\n        type: '/calendarReducer/SELECT_DATA',\r\n        data\r\n    } as const\r\n}\r\nexport const reservedDataAC = (data: Date) => {\r\n    return {\r\n        type: '/calendarReducer/RESERVED_DATA',\r\n        data\r\n    } as const\r\n}\r\nexport const CalendarReducer = (state: TypeInitialState = initialState, action: TypeActions): TypeInitialState => {\r\n    switch (action.type) {\r\n        case '/calendarReducer/CHANGE_DATA':\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        case '/calendarReducer/SELECT_DATA':\r\n            return{\r\n                ...state,\r\n                selectedDate:action.data\r\n            }\r\n        case '/calendarReducer/RESERVED_DATA':\r\n            let arr = [...state.reservedDate];\r\n            let formatted = formatDate(action.data)\r\n            if (arr.includes(formatted)) {\r\n                return {\r\n                    ...state,\r\n                    reservedDate:arr.filter(d => d!== formatted)\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                reservedDate:[...state.reservedDate, formatted]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype TypeActions =\r\n    | ReturnType<typeof changeDataAC>\r\n    | ReturnType<typeof selectDataAC>\r\n    | ReturnType<typeof reservedDataAC>\r\n\r\nexport type TypeInitialState = {\r\n    years: number[]\r\n    monthNames: string[]\r\n    weekDayNames: string[]\r\n    data: Date\r\n    currentDate: Date\r\n    selectedDate: Date\r\n    reservedDate:string[]\r\n\r\n}\r\n\r\nexport const formatDate = (d?: Date): string => {\r\n    if (!d) return '';\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2)\r\n        month = '0' + month;\r\n    if (day.length < 2)\r\n        day = '0' + day;\r\n\r\n    return [year, month, day].join('-')\r\n}","const DAYS_IN_WEEK = 7\r\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\r\nconst WEEK_DAYS_FROM_MONDAY = [6, 0, 1, 2, 3, 4, 5]\r\nconst Month = {\r\n    January: 0,\r\n    February: 1,\r\n    March: 2,\r\n    April: 3,\r\n    May: 4,\r\n    June: 5,\r\n    July: 6,\r\n    August: 7,\r\n    September: 8,\r\n    October: 9,\r\n    November: 10,\r\n    December: 11\r\n}\r\n\r\nexport function areEqual(a: Date, b: Date) {\r\n    if (!a || !b) return false;\r\n    return (\r\n        a.getFullYear() === b.getFullYear() &&\r\n        a.getMonth() === b.getMonth() &&\r\n        a.getDate() === b.getDate()\r\n    )\r\n} //Функция сравнивания текущий даты ,\r\n// используется для добавения нужных стилей в календаре\r\n\r\n\r\nexport function isLeapYear(year: number) {\r\n    return !((year % 4) || (!(year % 100) && (year % 400)))\r\n}\r\n\r\nexport function getDaysInMonth(date: Date) {\r\n    const month = date.getMonth();\r\n    const year = date.getFullYear();\r\n    const daysInMonth = DAYS_IN_MONTH[month];\r\n\r\n    if (isLeapYear(year) && month === Month.February) {\r\n        return daysInMonth + 1;\r\n    } else {\r\n        return daysInMonth;\r\n    }\r\n} //Высчитывание  дней месяца\r\n\r\nexport function getDayOfWeek(date: Date) {\r\n    const dayOfWeek = date.getDay();\r\n    return WEEK_DAYS_FROM_MONDAY[dayOfWeek];\r\n} //Высчитывание дней недели\r\n\r\nexport function getMonthData(year: number, month: number) {\r\n    const result: any = [];\r\n    const date = new Date(year, month);\r\n    const daysInMonth = getDaysInMonth(date);\r\n    const monthStartsOn = getDayOfWeek(date);\r\n    let day = 1\r\n\r\n    for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_IN_WEEK; i++) {\r\n        result[i] = [];\r\n\r\n        for (let j = 0; j < DAYS_IN_WEEK; j++) {\r\n            if ((i === 0 && j < monthStartsOn) || day > daysInMonth) {\r\n                result[i][j] = undefined;\r\n            } else {\r\n\r\n                result[i][j] = new Date(year, month, day++);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result\r\n} // Функция высчитвания нужных дат для текущего месяца и года(итоговый результат который\r\n// мы используем в нашем календаре)\r\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react'\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n    options?: number[]\r\n    onChangeOption?: (option: number) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n        type, name,\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        onChangeOption && onChangeOption(+e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const mappedOptions: JSX.Element[] = options ? options.map((o, i) => (\r\n            <label key={name + \"-\" + i}>\r\n                <input type={'radio'} value={o} checked={value === o} onChange={onChangeCallback}\r\n                       name={name} {...restProps}/>\r\n                {o + ':00'}\r\n            </label>\r\n        )) :\r\n        [];\r\n\r\n    return (\r\n        <>\r\n            {mappedOptions}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperRadio","import axios from 'axios'\r\n\r\n\r\nexport const Api = {\r\n\r\n    sendEmail(email: string, time: number, cost: string, name: string) {\r\n        return axios.post('https://calendar-smtp.herokuapp.com/sendMail', {\r\n            email, time, cost, name\r\n        }).then(response => {\r\n            return response.data\r\n        })\r\n\r\n    }\r\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport './calendar.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../bll/store'\r\nimport {changeDataAC, formatDate, reservedDataAC, selectDataAC, TypeInitialState} from '../../bll/calendarReducer'\r\nimport {areEqual, getMonthData} from './functions'\r\nimport classnames from 'classnames'\r\nimport SuperRadio from '../common/superRadio/superRadio'\r\nimport {Api} from '../../dall/api'\r\n\r\nfunction Calendar() {\r\n    const time = [10, 12, 14] //Варианты бронирования апартаментов\r\n    const localState = useSelector<AppRootStateType, TypeInitialState>(store => store.CalendarReducer)//Данные для каленаря из reducer\r\n    const [editMode, setEditMode] = useState<boolean>(false)//Модальное окно , бронирования\r\n    const [currentDate, setCurrentDate] = useState<Date>()//Текущая дата бронирования\r\n    const [customerName, setCustomerName] = useState<string>('')//Имя заказчика\r\n    const [customerEmail, setCustomerEmail] = useState<string>('')//Почта заказчика\r\n    const [timeReserved, setTimeReserved] = useState<number>(time[1])//Время заказа\r\n    const dispatch = useDispatch()\r\n    const monthData = getMonthData(localState.data.getFullYear(), localState.data.getMonth())\r\n\r\n    const handlePrevMonthButtonClick = () => {\r\n        const date = new Date(localState.data.getFullYear(), localState.data.getMonth() - 1);\r\n        dispatch(changeDataAC(date));\r\n    }; //перевод календаря на прошлый месяц\r\n    const handleNextMonthButtonClick = () => {\r\n        const date = new Date(localState.data.getFullYear(), localState.data.getMonth() + 1);\r\n        dispatch(changeDataAC(date));\r\n    };//перевод календаря на следующий месяц\r\n\r\n    const handleSelectMonth = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        const date = new Date(localState.data.getFullYear(), +e.currentTarget.value);\r\n        dispatch(changeDataAC(date));\r\n    };//выбор месяца\r\n    const handleSelectYear = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        const date = new Date(+e.currentTarget.value, localState.data.getMonth());\r\n        dispatch(changeDataAC(date));\r\n\r\n    };//выбор года\r\n\r\n    const handleDay = (date: Date) => {\r\n        dispatch(selectDataAC(date));\r\n        setEditMode(true)\r\n        setCustomerName('')\r\n        setCustomerEmail('')\r\n    } //Функция при выборе определённого дня\r\n\r\n    const reserveDate = () => {\r\n        dispatch(reservedDataAC(currentDate!));\r\n        setEditMode(false)\r\n        sessionStorage.setItem(formatDate(currentDate), JSON.stringify({name: customerName, time: timeReserved}))\r\n        let cost = currentDate?.getDay() === 6 || currentDate?.getDay() === 0 ?\r\n            (24 - timeReserved) * 30 + 'р.' :\r\n            (24 - timeReserved) * 10 + 'р.'\r\n\r\n        Api.sendEmail(customerEmail, timeReserved, cost, customerName)\r\n    } //Функция бронирования\r\n\r\n\r\n    return <>\r\n        <div className={editMode ? 'popup' : 'hide'}>\r\n            <div className={'popupContent'}>\r\n                <span onClick={() => setEditMode(false)} className={'x'}>X</span>\r\n                <input placeholder={'Name'} value={customerName} onChange={(e) =>\r\n                    setCustomerName(e.currentTarget.value)} type=\"text\"/>\r\n                <input placeholder={'Email'} value={customerEmail} onChange={(e) =>\r\n                    setCustomerEmail(e.currentTarget.value)} type=\"text\"/>\r\n                <span><SuperRadio\r\n                    name={\"value\"}\r\n                    options={time}\r\n                    value={timeReserved}\r\n                    onChangeOption={setTimeReserved}/></span>\r\n                <button className=\"btn\" disabled={(customerName.length && customerEmail.length) < 5}\r\n                        onClick={reserveDate}>Reserve\r\n                </button>\r\n            </div>\r\n        </div>\r\n        {/*Модальное окно*/}\r\n        <div className={'calendar'}>\r\n            <header>\r\n                <button onClick={handlePrevMonthButtonClick}>{'<'}</button>\r\n                <select\r\n                    onChange={handleSelectMonth}\r\n                    value={localState.data.getMonth()}\r\n                >{localState.monthNames.map((name, index) => {\r\n                    return <option key={name} value={index}>{name}</option>\r\n                })}</select>\r\n                <select\r\n\r\n                    onChange={handleSelectYear}\r\n                    value={localState.data.getFullYear()}\r\n                >{localState.years.map(year => {\r\n                    return <option key={year} value={year}>{year}</option>\r\n                })}</select>\r\n                <button onClick={handleNextMonthButtonClick}>{'>'}</button>\r\n            </header>\r\n            {/*Шапка календаря(месяц,год)*/}\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    {localState.weekDayNames.map(days => {\r\n                        return <th key={days}>{days}</th>\r\n                    })}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {monthData.map((week: any, index: number) =>\r\n\r\n                    <tr key={index} className=\"week\">\r\n                        {week.map((date: Date, index: number) => {\r\n                                let DataReserved = sessionStorage.getItem(formatDate(date))\r\n                                let dateString = formatDate(date); //YYYY-MM-DD\r\n                                let isInArr = localState.reservedDate.includes(dateString)\r\n                                return date ?\r\n                                    <td onClick={() => {\r\n                                        handleDay(date)\r\n                                        setCurrentDate(date)\r\n                                    }}\r\n                                        style={isInArr ? {background: '#c125b9'} : {}}\r\n                                        key={index} className={classnames('day', {\r\n                                        'today': areEqual(date, localState.currentDate),\r\n                                        'selected': areEqual(date, localState.selectedDate),\r\n                                    })}>{isInArr ? <div>\r\n                                        <div>\r\n                                            {date.getDate()}\r\n                                        </div>\r\n                                        <div>\r\n                                            {DataReserved && JSON.parse(DataReserved).name}\r\n                                        </div>\r\n                                        <div>\r\n                                            Стоимость:{date.getDay() === 6 || date.getDay() === 0 ?\r\n                                            DataReserved && (24 - JSON.parse(DataReserved).time) * 30 + 'р.' :\r\n                                            DataReserved && (24 - JSON.parse(DataReserved).time) * 10 + 'р.'}\r\n                                        </div>\r\n                                        <div>\r\n                                            Бронь с:{timeReserved + \":00\"}\r\n                                        </div>\r\n                                    </div> : <div>\r\n                                        <div>\r\n                                            {date.getDate()}\r\n                                        </div>\r\n                                        <div>\r\n                                            Стоимость:{date.getDay() === 6 || date.getDay() === 0 ?\r\n                                            '30р/час' : '10р/час'}\r\n                                        </div>\r\n                                    </div>}</td>\r\n\r\n                                    :\r\n                                    <td key={index}/>\r\n                            }\r\n                        )}\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n    </>\r\n\r\n}\r\n\r\nexport default Calendar\r\n","import React from 'react'\nimport Calendar from './components/calendar/calendar'\n\n\nfunction App() {\n  return (\n    <div>\n    <Calendar/>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore} from 'redux'\r\nimport {applyMiddleware} from 'redux'\r\nimport {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {CalendarReducer} from './calendarReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    CalendarReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}